// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.50'
    ext {
        versionName = "1.0.0"
        versionCode = "1"

        compileSdkVersion = 29
        buildToolsVersion = "29.0.2"
        minSdkVersion = 21
        targetSdkVersion = 29

        kotlin_version = '1.3.50'

        aRouterApiVersion = "1.4.1"
        aRouterCompilerVersion = "1.2.2"
    }
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.google.com/dl/android/maven2/' }
        maven { url 'https://dl.bintray.com/umsdk/release' }//友盟8.0以上需要引入的maven库

        maven() {
            url 'https://maven.aliyun.com/repository/releases'
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.google.com/dl/android/maven2/' }
        maven { url 'https://dl.bintray.com/umsdk/release' }//友盟8.0以上需要引入的maven库
        maven {
            url "http://mvn.gt.igexin.com/nexus/content/repositories/releases/"
        }

        flatDir {
            // 由于Library module中引用了 adlibrary 库的 aar，在多 module 的情况下，
            // 其他的module编译会报错，所以需要在所有工程的repositories
            // 下把Library module中的libs目录添加到依赖关系中
            dirs project(':adlibrary').file('libs')
            dirs project(':base_library').file('libs')
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}